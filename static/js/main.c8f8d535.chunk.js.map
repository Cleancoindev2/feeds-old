{"version":3,"sources":["web3.js","components/Link.jsx","components/Feed.jsx","components/Medianizer.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["web3","Web3","Link","props","href","title","text","target","rel","Feed","value","toBigNumber","this","toFixed","expires","moment","duration","humanize","updated","unix","fromNow","color","api","network","style","idx","valid","address","Component","readableAbi","require","medianizerAbi","lpad","x","y","n","Array","join","repeat","length","toBytes12","wad","BigNumber","replace","toString","toHex","read","contract","func","args","Promise","resolve","reject","error","result","Medianizer","state","show","feeds","loadMedianizer","med","a","async","updateMedianizer","res","next","toDecimal","values","i","push","all","Object","forEach","setState","updateFeed","infura","eth","filter","fromBlock","fromWei","fromEvent","fab","window","c","at","zzz","owner","Math","floor","Date","now","updateExpirations","keys","toggle","onClick","className","map","key","App","data","mainnet","kovan","rinkeby","setProvider","currentProvider","providers","HttpProvider","version","getNetwork","reset","StrictMode","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8f8d535.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nconst web3 = new Web3();\n\nexport default web3;\n\nexport const initWeb3 = (web3) => {\n  if (window.web3) {\n    web3.setProvider(window.web3.currentProvider);\n  } else {\n    web3.setProvider(new Web3.providers.HttpProvider('https://mainnet.infura.io/'));\n    web3.infura = true;\n  }\n  window.web3 = web3;\n}\n","import React from 'react'\n\nconst Link = (props) => {\n  return (\n    <a\n      href={props.href}\n      title={props.title || props.text || \"\"}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      {props.text || props.href}\n    </a>\n  )\n}\n\nexport default Link\n","import React, { Component } from 'react';\nimport Link from './Link';\nimport moment from 'moment';\nimport web3 from '../web3';\n\nclass Feed extends Component {\n  render() {\n    const value = web3.toBigNumber(this.props.value).toFixed(3);\n    const expires = moment.duration(this.props.expires, \"seconds\").humanize(true);\n    const updated = this.props.updated ? moment.unix(this.props.updated).fromNow() : this.props.updated;\n    const color = this.props.expires < 0 ? 'red' : ( this.props.expires < 2700 ? 'orange' : '#444');\n    const api = this.props.network === 'mainnet' ? '' : `${this.props.network}.`;\n    //const balance = web3.fromWei(this.props.balance).toFixed(3);\n    return (\n      <div>\n        <p style={{color}}>\n          <b>{this.props.idx + 1}</b> {value} {this.props.valid && this.props.expires > 0 ? 'expires' : 'expired'} {expires}.{updated && `Updated ${updated}.`} <Link href={`https://${api}etherscan.io/address/${this.props.address}`} text={this.props.address} />\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Feed;\n","import React, { Component } from 'react';\nimport Feed from './Feed';\nimport Link from './Link';\nimport web3 from '../web3';\n\nconst readableAbi = require('../abi/readable.json');\nconst medianizerAbi = require('../abi/medianizer.json');\n\nconst repeat = (x, n) => n > 0 ? new Array(n + 1).join(x) : \"\"\n//const rpad = (x, y, n) => x + repeat(y, n - x.length)\nconst lpad = (x, y, n) => repeat(y, n - x.length) + x\nconst toHex = wad => new web3.BigNumber(wad.replace(\".\", \"\")).toString(16)\nconst toBytes12 = (wad) => `0x${lpad(toHex(`${wad}`), \"0\", 24)}`\n\nconst read = (contract, func, ...args) => {\n  return new Promise((resolve, reject) => {\n    contract[func](...args, (error, result) => {\n      error ? reject(error) : resolve(result);\n    });\n  });\n}\n\nclass Medianizer extends Component {\n  state = {\n    value: null,\n    valid: null,\n    show: 'hide',\n    feeds: {}\n  }\n\n  componentDidMount() {\n    // setInterval(() => this.updateExpirations(), 60000);\n    const med = web3.eth.contract(medianizerAbi).at(this.props.address);\n    this.loadMedianizer(med);\n  }\n\n  loadMedianizer = async (med) => {\n    this.updateMedianizer(med);\n    const res = await read(med, 'next');\n    const next = web3.toDecimal(res);\n    const values = [];\n    for (let i = 1; i < next; i++) {\n      values.push(read(med, 'values', toBytes12(i)));\n    };\n    const feeds = await Promise.all(values);\n    Object.values(feeds).forEach((x, i) => {\n      if (x !== \"0x0000000000000000000000000000000000000000\") {\n        feeds[x] = {\n          idx: i\n        };\n      }\n    });\n    this.setState({ feeds });\n    feeds.forEach(address => {\n      if (address !== \"0x0000000000000000000000000000000000000000\") {\n        this.updateFeed(address, false);\n        if (!web3.infura) {\n          web3.eth.filter({ address, fromBlock: 'latest' }, (error, result) => {\n            if (!error) {\n              this.updateFeed(result.address, true);\n              this.updateMedianizer(med);\n            }\n          });\n        }\n      }\n    });\n  }\n\n  updateMedianizer = async (med) => {\n    const result = await read(med, 'peek');\n    const value = web3.fromWei(result[0]);\n    const valid = result[1];\n    //const speech = web3.toBigNumber(medianizer.value).toFixed(3);\n    //window.speechSynthesis.speak(new SpeechSynthesisUtterance(`New price is ${speech}`));\n    this.setState({ value, valid });\n  }\n\n  updateFeed = async (address, fromEvent) => {\n    const fab = web3.eth.contract(readableAbi);\n    window.fab = fab;\n    const c = fab.at(address);\n    const value = await read(c, 'peek');\n    const zzz = await read(c, 'zzz');\n    const owner = await read(c, 'owner');\n\n    const feeds = { ...this.state.feeds };\n    feeds[address] = {\n      value: web3.fromWei(value[0]),\n      zzz: web3.toDecimal(zzz),\n      expires: web3.toDecimal(zzz) - (Math.floor(Date.now() / 1000)),\n      owner: owner,\n      valid: value[1],\n      updated: fromEvent ? Math.floor(Date.now() / 1000) : null,\n      //balance: await getBalance(web3, owner),\n      idx: feeds[address].idx\n    }\n    this.setState({ feeds });\n  }\n\n  updateExpirations = () => {\n    const feeds = this.state.feeds;\n    Object.keys(feeds).forEach(x => {\n      feeds[x].expires = web3.toDecimal(feeds[x].zzz) - (Math.floor(Date.now() / 1000))\n    });\n    this.setState({ feeds });\n  }\n\n  // const getBalance = (web3, account) => {\n//   return new Promise((resolve, reject) => {\n//     web3.eth.getBalance(account, (error, result) => {\n//       error ? reject(error) : resolve(result);\n//     });\n//   })\n// }\n\n  toggle = () => {\n    let show = this.state.show;\n    show = show === 'show' ? 'hide' : 'show';\n    this.setState({ show });\n  }\n\n  render() {\n    const value = web3.toBigNumber(this.state.value).toFixed(3);\n    const feeds = this.state.feeds;\n    const api = this.props.network === 'mainnet' ? '' : `${this.props.network}.`;\n    if (!this.state.value) {\n      return (\n        <h1>Loading...</h1>\n      )\n    } else {\n      return (\n        <div>\n          <h1>{this.props.title} {value}</h1>\n          <h3>\n            <Link href={`https://${api}etherscan.io/address/${this.props.address}`} text={this.props.address} />\n          </h3>\n          <p>\n            <button onClick={this.toggle}>\n              Click to {this.state.show === 'show' ? 'hide' : 'show'} details\n            </button>\n          </p>\n          <div className={this.state.show}>\n            {\n              Object.keys(feeds).map((x, i) =>\n                feeds[x].value && <Feed network={this.props.network} key={i} address={x} {...feeds[x]} />\n              )\n            }\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Medianizer;\n","import React, { Component } from 'react';\nimport web3, { initWeb3 } from '../web3';\nimport Medianizer from './Medianizer';\nimport Link from './Link';\nimport './App.css';\n\nclass App extends Component {\n\n  data = {\n    mainnet: [\n      {\n        address: '0x729D19f657BD0614b4985Cf1D82531c67569197B',\n        title: 'ETH/USD'\n      },\n      {\n        address: '0x99041F808D598B782D5a3e498681C2452A31da08',\n        title: 'MKR/USD'\n      },\n      {\n        address: '0x23E2953aca3cc872c51d0d9e59DDC19d8F923F80',\n        title: 'BAT/USD'\n      },\n      {\n        address: '0x6ADaDdA09EA70f82Cf6BBC4c890fD040F6Fb3d4b',\n        title: 'POLY/USD'\n      }\n    ],\n    kovan: [\n      {\n        address: '0xa5aA4e07F5255E14F02B385b1f04b35cC50bdb66',\n        title: 'ETH/USD'\n      },\n      {\n        address: '0xeBaa5D5cfe7F1201bebC6fb88240bBef285b4Fee',\n        title: 'MKR/USD'\n      },\n      {\n        address: '0xFeB7d3aC74CB3c6d8E6Ae8882394F0C68363b944',\n        title: 'REP/USD'\n      },\n      {\n        address: '0x8323ddE7e886684923599De7B719C984b5Cbd75b',\n        title: 'POLY/USD'\n      }\n    ],\n    rinkeby: [\n      {\n        address: '0xE39451e34f8FB108a8F6d4cA6C68dd38f37d26E3',\n        title: 'REP/USD'\n      }\n    ]\n  }\n\n  state = {\n    network: null,\n  }\n\n  componentDidMount() {\n    initWeb3(web3);\n    web3.version.getNetwork((error, network) => {\n      if (!error) {\n        web3.reset(true);\n        if (network === \"42\") {\n          this.setState({ network: 'kovan' })\n        } else if (network === \"4\") {\n          this.setState({ network: 'rinkeby' })\n        } else {\n          this.setState({ network: 'mainnet' })\n        }\n      }\n    });\n  }\n\n  render() {\n    const network = this.state.network;\n    return (\n      <div>\n        <p>\n          Official {network} Maker Feeds used for the Dai Stablecoin System. For more info visit <Link href=\"https://chat.makerdao.com/channel/feeds\" />\n        </p>\n        {\n          this.state.network &&\n          <div>\n            <React.StrictMode>\n              {this.data[network].map((med, i) => {\n                return <Medianizer key={i} network={network} address={med.address} title={med.title} />\n              })}\n            </React.StrictMode>\n          </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}